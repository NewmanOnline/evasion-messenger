# -*- coding: utf-8 -*-
"""
"""
import json
import unittest
import threading

from evasion.messenger import hub
from evasion.messenger import frames
from evasion.messenger import endpoint


TIMEOUT = 15

class CallBack(object):
    data = None

    def __init__(self):
        self.waiter = threading.Event()

    def wait(self):
        self.waiter.wait(TIMEOUT)
        if not self.data:
            raise ValueError("The callback never called before timeout.")
        # reset for next run:
        self.waiter.clear()

    def __call__(self, data):
        self.data = data
        #print("CallBack: <%s>" % data)
        self.waiter.set()

    def __str__(self):
        return "Test CallBack"



class Messenger(unittest.TestCase):

    def setUp(self):
        self.reg = None
        self.broker = hub.MessagingHub()
        self.broker.start()
        self.to_stop = []

    def tearDown(self):
        self.broker.stop()
        for i in self.to_stop:
            i.stop()


    def test_string_message_generation(self):
        """Test the messages generated by convertions provides by frames.py
        """
        correct = "HUB_PRESENT %s" % json.dumps(dict(version=frames.PKG.version))
        rc = frames.hub_present_message()
        self.assertEquals(rc, correct)

        signal = 'tea_time'
        proc_uid = '0987'
        source_uid = '12345'
        data = dict(a=1)
        json_data = json.dumps(dict(
            reply_to=source_uid,
            data=data,
        ))

        rc = frames.dispatch_message(proc_uid, signal, data, source_uid)
        correct = "DISPATCH %(proc_uid)s %(signal)s %(json_data)s" % locals()
        self.assertEquals(rc, correct)

        json_data = json.dumps(dict(
            reply_to="",
            data=data,
        ))
        rc = frames.dispatch_message(proc_uid, signal, data)
        correct = "DISPATCH %(proc_uid)s %(signal)s %(json_data)s" % locals()
        self.assertEquals(rc, correct)


    def testPublistSubscribe(self):
        """Test the publish-subscribe.
        """
        my_cb = CallBack()
        tran = endpoint.Transceiver({}, my_cb)
        self.to_stop.append(tran)
        tran.start()

        # Wait for hub present
        import pdb ; pdb.set_trace()

        my_cb.wait()

        return

        self.reg = endpoint.Register()
        self.reg.start()

        self.reg.subscribe('tea_time', my_cb)
        self.reg.publish('tea_time', dict(cake="sponge"))

        import pdb ; pdb.set_trace()

        my_cb.wait()
        self.assertEquals()


